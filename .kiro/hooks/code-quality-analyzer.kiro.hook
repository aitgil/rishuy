{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and provides automated code quality analysis including code smells, design patterns, and best practices suggestions",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.js",
      "tests/**/*.js",
      "scripts/**/*.sh",
      "*.js"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify long methods, duplicate code, complex conditionals, and other maintainability issues\n2. **Design Patterns**: Suggest appropriate patterns that could improve the code structure\n3. **Best Practices**: Check for JavaScript/Node.js best practices, error handling, async/await usage\n4. **Performance**: Look for optimization opportunities without breaking functionality\n5. **Readability**: Suggest improvements for variable naming, function structure, and comments\n6. **Architecture Alignment**: Ensure changes follow the layered architecture pattern (handlers, services, utils)\n7. **Testing**: Recommend test coverage improvements if applicable\n\nFor each suggestion:\n- Explain WHY the change would be beneficial\n- Provide specific code examples when possible\n- Prioritize suggestions by impact (high/medium/low)\n- Consider the Hebrew/Israeli context of this Telegram bot project\n- Maintain compatibility with existing functionality\n\nPresent findings in a clear, actionable format that helps improve code quality while preserving the current working functionality."
  }
}