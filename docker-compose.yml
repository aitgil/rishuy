version: '3.8'

services:
  telegram-vehicle-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-vehicle-bot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_TIMEOUT=${API_TIMEOUT:-5000}
      - API_RETRY_ATTEMPTS=${API_RETRY_ATTEMPTS:-3}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-10}
    volumes:
      # אופציונלי: mount לוגים אם נדרש
      - ./logs:/app/logs:rw
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('./src/bot').healthCheck().then(h => process.exit(h.healthy ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # הגבלות משאבים
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # אופציונלי: Redis לאחסון cache מתקדם
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # אופציונלי: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: telegram-bot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - bot-network
    depends_on:
      - telegram-vehicle-bot
    profiles:
      - webhook

networks:
  bot-network:
    driver: bridge

volumes:
  redis-data:
    driver: local